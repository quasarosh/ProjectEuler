package projecteuler;

/**
 * Even Fibonacci Numbers
 * Project Euler Problem #2 - https://projecteuler.net/problem=2
 * 
 * Question: 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 * 
 * Answer: 4613732
 * 
 * Solution: 
 * Using Fibonacci number formula (f(n) = f(n-1) + f(n-2)), get a Fibonacci number which is smaller than a given target and a sum of all
 * even-valued Fibonacci numbers. There are two ways to get a Fibonacci number: recursively and iteratively, and I implemented iteratively, 
 * since performance-wise, it is better approach than recursive way. 
 * 
 * Time Complexity: O(n)
 * 
 * Ref: https://en.wikipedia.org/wiki/Fibonacci_number  
 * 
 * Sample output:   
 * Sum of Even Fibonacci Numbers: 4613732
 * Execution Time: 1 milliseconds   
 * Reason to Pick: To get more familiar with the problems in this web site.   
 *   
 * Time to spend: 
 * - Solve a question: 15 minutes
 * - Etc (Commenting, testing, restructuring, etc): more than a hour
 * @author Rosh Lee
 *
 */

import projecteuler.enums.NumberType;
import projecteuler.utils.FibonacciUtils;


public class EvenFibonacciNumbers {

	private static final int TARGET = 4000000;
	
	/**
	 * This method is used to get a sum of even Fibonacci numbers, which are less than a given target number. 
	 * It is using 'fibonacciNumberSum' method in FibonacciUtils file to get the sum.  
	 * @param target
	 * @return
	 * @throws IllegalArgumentException
	 */
	public int evenFibonacciNumberSum (int target) throws IllegalArgumentException {
		return FibonacciUtils.fibonacciNumberSum(target, NumberType.EVEN);
	}
	
	/**
	 * Test program:
	 * Testing with the target value. Printing the result value with its execution time. 
	 * 
	 */
	public static void main(String[] args) {

		EvenFibonacciNumbers fibNums = new EvenFibonacciNumbers(); 
		
		long startTime = System.currentTimeMillis();
		int res = fibNums.evenFibonacciNumberSum(TARGET);
		long endTime = System.currentTimeMillis();
		System.out.println("Sum of Even Fibonacci Numbers: " + res);
		System.out.println("Execution Time: " + (endTime - startTime) + " milliseconds");

	}

}
